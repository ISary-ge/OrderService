/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { NotificationsHistoryService } from "../notificationsHistory.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { NotificationsHistoryCreateInput } from "./NotificationsHistoryCreateInput";
import { NotificationsHistory } from "./NotificationsHistory";
import { NotificationsHistoryFindManyArgs } from "./NotificationsHistoryFindManyArgs";
import { NotificationsHistoryWhereUniqueInput } from "./NotificationsHistoryWhereUniqueInput";
import { NotificationsHistoryUpdateInput } from "./NotificationsHistoryUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class NotificationsHistoryControllerBase {
  constructor(
    protected readonly service: NotificationsHistoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NotificationsHistory })
  @nestAccessControl.UseRoles({
    resource: "NotificationsHistory",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createNotificationsHistory(
    @common.Body() data: NotificationsHistoryCreateInput
  ): Promise<NotificationsHistory> {
    return await this.service.createNotificationsHistory({
      data: data,
      select: {
        createdAt: true,
        id: true,
        text: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [NotificationsHistory] })
  @ApiNestedQuery(NotificationsHistoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "NotificationsHistory",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async notificationsHistories(
    @common.Req() request: Request
  ): Promise<NotificationsHistory[]> {
    const args = plainToClass(NotificationsHistoryFindManyArgs, request.query);
    return this.service.notificationsHistories({
      ...args,
      select: {
        createdAt: true,
        id: true,
        text: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NotificationsHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "NotificationsHistory",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async notificationsHistory(
    @common.Param() params: NotificationsHistoryWhereUniqueInput
  ): Promise<NotificationsHistory | null> {
    const result = await this.service.notificationsHistory({
      where: params,
      select: {
        createdAt: true,
        id: true,
        text: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NotificationsHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "NotificationsHistory",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateNotificationsHistory(
    @common.Param() params: NotificationsHistoryWhereUniqueInput,
    @common.Body() data: NotificationsHistoryUpdateInput
  ): Promise<NotificationsHistory | null> {
    try {
      return await this.service.updateNotificationsHistory({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          text: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NotificationsHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "NotificationsHistory",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteNotificationsHistory(
    @common.Param() params: NotificationsHistoryWhereUniqueInput
  ): Promise<NotificationsHistory | null> {
    try {
      return await this.service.deleteNotificationsHistory({
        where: params,
        select: {
          createdAt: true,
          id: true,
          text: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
